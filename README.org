* Manual installations

- [[https://vivaldi.com][Vivaldi]]
  + [[https://darkreader.org][DarkReader]]
  + [[https://lastpass.com/misc_download2.php][LastPass]]
  + [[https://vimium.github.io][Vimium]]
  + [[https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj?hl=en][Pocket]]
  + [[https://chrome.google.com/webstore/detail/refined-github/hlepfoohegkhhmjieoechaddaejaokhf?hl=en][Refined GitHub]]
  + [[https://chrome.google.com/webstore/detail/better-pull-request-for-g/nfhdjopbhlggibjlimhdbogflgmbiahc?hl=en][Better Pull Requests for GitHub]]
  + [[https://chrome.google.com/webstore/detail/the-great-discarder/jlipbpadkjcklpeiajndiijbeieicbdh?hl=en][The Great Discarder]]
- [[https://iterm2.com/downloads.html][iTerm2]]
- Fonts
  + [[https://github.com/source-foundry/Hack#macos][Hack]]
  + [[https://fonts.google.com/specimen/Lora?preview.text_type=custom][Lora]]
- [[https://hub.docker.com/editions/community/docker-ce-desktop-mac/][Docker]]
- Spotify
- Pocket Reader
- Spectacle / Rectangle

* Terminal
** Zsh
#+begin_src sh :eval no :tangle ~/.zshrc
source ~/.aliases
source ~/.envvar
if [ -f ~/.tempus.envvar ]; then
    source ~/.tempus.envvar
fi
source ~/.myrc

export ZSH_DISABLE_COMPFIX="true"

eval "$(starship init zsh)"

source ~/repos/zsh-snap/znap.zsh
source ~/.zsh_plugins

bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

# subword navigation (removed / and _)
export WORDCHARS='*?-.[]~=&;!#$%^(){}<>'

# The next line updates PATH for the Google Cloud SDK.
if [ -f ~/apps/google-cloud-sdk/path.zsh.inc ]; then source ~/apps//google-cloud-sdk/path.zsh.inc; fi

# The next line enables shell command completion for gcloud.
if [ -f ~/apps/google-cloud-sdk/completion.zsh.inc ]; then source ~/apps//google-cloud-sdk/completion.zsh.inc; fi


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('$HOME/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# init pyenv
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"

# init racket if installed
if [ -d "/Applications/Racket/bin" ]; then
    export PATH="/Applications/Racket/bin:$PATH"
fi
autoload -U +X bashcompinit && bashcompinit
eval "$(starship init zsh)"
#+end_src

*** Plugins
**** Install a plugin manager
#+begin_src sh
mkdir -p ~/repos/
git clone --depth 1 https://github.com/marlonrichert/zsh-snap.git ~/repos/zsh-snap
#+end_src

#+RESULTS:

**** Set up plugins
#+begin_src sh :eval no :tangle ~/.zsh_plugins
znap source ohmyzsh/ohmyzsh plugins/git
znap source ohmyzsh/ohmyzsh plugins/pip
znap source ohmyzsh/ohmyzsh plugins/osx
znap source ohmyzsh/ohmyzsh plugins/gcloud
znap source zsh-users/zsh-autosuggestions
znap source zsh-users/zsh-syntax-highlighting
#+end_src

** Environment variables
#+begin_src sh :eval no :tangle ~/.envvar
export PATH="$HOME/miniconda3/bin:$PATH"
export PATH="$PATH:$HOME/.emacs.d/bin"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
export EDITOR="emacs -nw"
#+end_src
** Aliases
#+begin_src sh :eval no :tangle ~/.aliases
alias rgf='rg --files | rg'
alias ls='ls -G'
alias l='ls'
alias ll='ls -lh'
alias lla='ls -lah'
alias la='ls -lah'
#+end_src
** Starship
*** Install
#+begin_src sh
curl -fsSL https://starship.rs/install.sh | bash
#+end_src

#+RESULTS:

*** Configuration
#+begin_src conf-toml :eval no :tangle ~/.config/starship.toml
[directory]
truncate_to_repo = false
#+end_src
** Command Line Tools
Installs a bunch of useful tools
#+begin_src sh 
brew install graphviz aspell pandoc ripgrep jq
#+end_src

* Python
** Miniconda
#+begin_src sh
curl -sS https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh > ~/miniconda.sh
bash ~/miniconda.sh -b -p "$HOME/miniconda3"
rm ~/miniconda.sh
#+end_src

** Pyenv
#+begin_src sh
git clone https://github.com/pyenv/pyenv.git ~/.pyenv
#+end_src

** Poetry
#+begin_src sh 
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
#+end_src

* SSH
** Config
#+begin_src conf-space :eval no :tangle ~/.ssh/config
Host *
     AddKeysToAgent yes
     UseKeychain yes
     IdentityFile ~/.ssh/github_rsa
#+end_src
* Git
** Config

#+begin_src conf :tangle ~/.gitconfig
[user]
# Please adapt and uncomment the following lines:
	name = Virgile Landeiro
	email = virgile.landeiro@gmail.com

[alias]
	co = checkout
	ci = commit
	st = status
	br = branch
	tree = log --graph --oneline
	squash = rebase -i
    
[github]
	user = vlandeiro

[core]
    editor = emacs

[diff]
    tool = magit
#+end_src
* DOOM Emacs
** Init
:PROPERTIES:
:header-args: :tangle ~/.doom.d/init.el
:END:

#+begin_src elisp
;;; init.el -*- lexical-binding: t; -*-

;; Remember to run 'doom refresh' after modifying it.
;;
;; More information about these modules (and what flags they support) can be
;; found in modules/README.org.

(doom! :input
       ;;chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
                                        ;(helm
                                        ; +fuzzy
                                        ; :lang org)              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +fuzzy)               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       (emoji
        +github
        +unicode)
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;; fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       ;; ligatures
        ;; +extra)
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +all             ; catch all popups that start with an asterix
        +defaults)       ; default popup rules
       ;;tabs              ; an tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       ;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;; window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen

       :editor
       ;;(evil +everywhere); come to the dark side, we have cookies
       ;; file-templates    ; auto-snippets for empty files
       ;;god               ; run Emacs commands without modifier keys
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;lispy             ; vim for lisp, for people who dont like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;; rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)    ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       vc                ; version-control and Emacs, sitting in a tree
       undo
       ibuffer

       :term
       ;;eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       term              ; terminals in Emacs
       ;;vterm             ; another terminals in Emacs

       :checkers
       ;; grammar
       spell
       syntax

       :tools
       ;;ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;; ein               ; tame Jupyter notebooks with emacs
       eval              ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup           ; helps you navigate your code and documentation
        +docsets
        +dictionary
        +offline)        ; ...or in Dash docsets locally
       ;;lsp
       (magit +forge)             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp
       ;;wakatime

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;(cc)                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;erlang            ; an elegant language for a more civilized age
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;       ess               ; emacs speaks statistics
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;go                ; the hipster dialect
       ;;(haskell +intero) ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org              ; organize your plain life in plain text
        ;;+dragndrop       ; drag & drop files/images into org buffers
        +pandoc          ; export-with-pandoc support
        +jupyter
        +roam
        +pretty
        ;;+present
        ;;+gnuplot
        )        ; using org-mode for presentations
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python
        ;;+lsp
        +pyenv
        +poetry)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket            ; a DSL for DSLs
       ;; rest              ; Emacs as a REST client
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml

       :email
       ;;(mu4e +gmail)       ; WIP
       ;;notmuch             ; WIP
       ;;(wanderlust +gmail) ; WIP

       ;; Applications are complex and opinionated modules that transform Emacs
       ;; toward a specific purpose. They may have additional dependencies and
       ;; should be loaded late.
       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :os
       macos             ; MacOS-specific commands

       :config
       (default +bindings)
       )
#+end_src

#+RESULTS:

** Config
:PROPERTIES:
:header-args: :tangle ~/.doom.d/config.el
:END:
#+begin_src elisp
;;; .doom.d/config.el -*- lexical-binding: t; -*-
#+end_src
*** Theme
**** Customize fonts

#+begin_src elisp
(setq doom-font (font-spec :family "Hack" :size 13)
      doom-variable-pitch-font (font-spec :family "ETBembo" :style "RomanOSF" :size 16))
#+end_src

Turn off ligatures for now since they're not working on my work laptop.
#+begin_src elisp :tangle no
(plist-put! +ligatures-extra-symbols
            ;; org
            :name          "≡"
            :src_block     "❱"
            :src_block_end "❰"
            :quote         "“"
            :quote_end     "”")
#+end_src

#+RESULTS:

**** Change theme

#+begin_src elisp
(load-theme 'doom-palenight t)
#+end_src

#+RESULTS:

*** Coding
**** Code folding
#+begin_src elisp
(define-key prog-mode-map (kbd "C-<tab>") '+fold/toggle)
(define-key prog-mode-map (kbd "C-<") '+fold/close-all)
(define-key prog-mode-map (kbd "C->") '+fold/open-all)
#+end_src

**** Python / Jupyter
#+begin_src elisp
(after! python
  (setq-default flycheck-disabled-checkers '(python-pylint))
  (add-hook! 'python-mode-hook
             :append (anaconda-mode)
             :append (python-docstring-mode)
             )
  (setq org-babel-default-header-args:jupyter-python '((:session . "*jpy*")
                                                       (:async "yes")
                                                       (:kernel . "python3")
                                                       (:results . "drawer output raw"))))
#+end_src

#+RESULTS:
: ((:session . *jpy*) (:async yes) (:kernel . python3) (:results . drawer output raw))

#+begin_src elisp
(defun +virgile/close-on-already-formatted (FORMATTER STATUS)
  "Closes the format-all window if the document was formatted without any error"
  (let (format-all-window (get-buffer-window "*format-all-errors*"))
    (if (and (member STATUS '(:already-formatted :reformatted))
             format-all-window)
        (delete-window format-all-window))
    )
  )

(after! format-all
  (add-hook! 'format-all-after-format-functions :append +virgile/close-on-already-formatted)
  )

(defun +virgile/setup-org-jupyter nil
  "Avoid emacs-jupyter / ob-async incompatibility"
  (interactive)
  (setq ob-async-no-async-languages-alist '("jupyter-python"))
  )
#+end_src

#+RESULTS:
: +virgile/setup-org-jupyter

#+begin_src elisp
(after! poetry
  (setq poetry-tracking-strategy 'projectile))
#+end_src

#+RESULTS:
: projectile

**** Magit
#+begin_src elisp
(after! magit
  (setq magit-commit-show-diff nil)
  )
#+end_src

*** Moving / Loading
**** Ivy
#+begin_src elisp
(after! ivy
  (define-key ivy-minibuffer-map (kbd "<left>") 'counsel-up-directory)
  (define-key ivy-minibuffer-map (kbd "<right>") 'ivy-alt-done)
  (define-key ivy-minibuffer-map (kbd "C-<return>") 'ivy-immediate-done)
  )
#+end_src

**** Framemove
Move easily across frames with s-<arrow-key>.

#+name: framemove
#+begin_src elisp
(push (expand-file-name "~/repos/dotfiles/elisp") load-path)
(require 'framemove)
(windmove-default-keybindings 'super)
(setq framemove-hook-into-windmove t)
#+end_src


**** Avy
Make avy work across all windows and add quick bindings for avy goto.
#+name: avy
#+begin_src elisp
(setq avy-all-windows 'all-frames)
(map! :leader
      (:prefix ("m" . "move")
       :desc "by word/subword" "w" #'avy-goto-word-or-subword-1
       :desc "by char" "c" #'avy-goto-char
       :desc "by many characters" "t" #'avy-goto-char-timer
       )
      )
#+end_src

*** Writing / Reading / Drawing
**** Org
***** General
This does a few things:
- change the agenda files to point to the org-roam files
- create a default file for notes
- indent org files, number headers, and turn on visual line mode
- display inline images

#+begin_src elisp
3
#+end_src

#+RESULTS:
: 3

#+begin_src elisp
(setq org-confirm-babel-evaluate nil
      org-agenda-files '("~/org/roam")
      org-hide-emphasis-markers t
      org-default-notes-file (expand-file-name "~/org/notes.org")
      org-hide-leading-stars nil)
(add-hook! 'org-mode-hook
           #'org-num-mode
           #'visual-line-mode)
(add-hook! 'org-mode-hook
  (display-line-numbers-mode 0)
  (highlight-indent-guides-mode 0)
  (hl-line-mode 0))
#+end_src

#+begin_src elisp
(after! mixed-pitch
  (setq mixed-pitch-set-height t))
#+end_src

Setup headlines fonts to use the ETBembo family and decreasing size.

#+begin_src elisp
(after! org
  (custom-set-faces!
    ;; `(org-level-1 :inherit outline-1
    ;;               :family "ETBembo" :height 1.4
    ;;               :weight normal :slant normal
    ;;               :foreground ,(doom-color 'fg)
    ;;               :box (:line-width 3 :color ,(doom-color 'bg)))
    ;; `(org-level-2 :inherit variable-pitch
    ;;               :family "ETBembo" :height 1.3
    ;;               :weight normal :slant normal
    ;;               :foreground ,(doom-color 'fg)
    ;;               :box (:line-width 1 :color ,(doom-color 'bg)))
    ;; `(org-level-3 :inherit variable-pitch :family "ETBembo" :height 1.2 :weight normal :slant normal :foreground ,(doom-color 'fg))
    ;; `(org-level-4 :inherit variable-pitch :family "ETBembo" :height 1.2 :weight normal :slant italic :foreground ,(doom-color 'fg))
    ;; `(org-level-5 :inherit variable-pitch :family "ETBembo" :height 1.1 :weight normal :slant italic :foreground ,(doom-color 'fg))
    ;; `(org-level-6 :inherit variable-pitch :family "ETBembo" :height 1.0 :weight normal :slant italic :foreground ,(doom-color 'fg))
    ;; `(org-level-7 :inherit variable-pitch :family "ETBembo" :height 1.0 :weight normal :slant italic :foreground ,(doom-color 'fg))
    ;; `(org-level-8 :inherit variable-pitch :family "ETBembo" :height 1.0 :weight normal :slant italic :foreground ,(doom-color 'fg))
    `(org-block-begin-line :slant normal)
    `(org-block-end-line :slant normal)
    ;; `(org-superstar-header-bullet :foreground ,(doom-color 'grey))
    `(org-num-face :height 1.0)
    `(org-drawer :inherit org-block :background ,(doom-color 'bg) :foreground ,(doom-color 'blue))))
#+end_src

#+RESULTS:
| doom--customize-themes-h-13 | doom--customize-themes-h-784 | doom--customize-themes-h-785 |

***** Roam
#+begin_src elisp
(after! org
  (setq
   org-roam-graph-viewer "open"
   org-roam-dailies-directory "daily/"
   org-roam-dailies-capture-templates '(("d" "default" plain
                                         #'org-roam-capture--get-point
                                         "* %?"
                                         :file-name "daily/%<%Y-%m-%d>"
                                         :head "#+TITLE: %<%Y-%m-%d>\n#+DATE: <%<%Y-%m-%d %a>>\n\n* Check-in [/]\n"))
   org-roam-graph-exclude-matcher '("private" "daily" "jira-tickets")
   )
  (add-to-list 'org-roam-capture-templates
               '("j" "JIRA ticket" plain
                 #'org-roam-capture--get-point
                 "%?"
                 :file-name "jira-tickets/%<%Y%m%d%H%M%S>-${title}"
                 :head "#+TITLE: ${title}\n#+ROAM_KEY: https://tempuslabs.atlassian.net/browse/${title}\n\n")
               )
  )
#+end_src

***** Bindings
#+begin_src elisp
(after! org
  (map! :map org-mode-map
        "C-<return>" #'org-insert-heading
        "C-M-<right>" #'org-demote-subtree
        "C-M-<left>" #'org-promote-subtree
        )

  (map! :map org-mode-map :leader
        (:prefix-map ("i" . "insert")
         :desc "drawer" "d" #'org-insert-drawer
         :desc "heading" "h" #'org-insert-heading
         :desc "item" "i" #'org-insert-item
         :desc "link" "l" #'org-insert-link
         :desc "subheading" "s" #'org-insert-subheading
         :desc "template" "t" #'org-insert-structure-template
         ))
  )
#+end_src

***** Export

Add some export modes (github, html, rst)
#+begin_src elisp
(after! org
  (require 'ox-gfm nil t)
  (require 'ox-twbs nil t)
  (require 'ox-rst nil t)
  )
#+end_src

Change default export options (no toc, latex-style superscript)

#+begin_src elisp
(after! org
  (setq
   org-export-with-toc nil
   org-export-with-sub-superscripts '{}
   org-export-with-smart-quotes nil
   )
  )
#+end_src

#+RESULTS:

**** Elfeed
#+begin_src elisp
(after! elfeed
  (elfeed-score-enable)
  (setq-default elfeed-search-filter "@3-days-ago -finance +unread")
  (map! :map elfeed-show-mode-map
        "a" #'pocket-reader-add-link)
  (map! :map elfeed-search-mode-map
        "a" #'pocket-reader-add-link)
  (add-hook! 'elfeed-show-mode-hook #'variable-pitch-mode))
#+end_src

#+RESULTS:
| variable-pitch-mode | doom--setq-shr-external-rendering-functions-for-elfeed-show-mode-h | doom--setq-shr-put-image-function-for-elfeed-show-mode-h | +rss-elfeed-wrap-h |

#+begin_src elisp
(after! elfeed-score
  (setq elfeed-score-serde-score-file (expand-file-name "~/.config/elfeed.score"))
;  (setq elfeed-search-print-entry-function #'elfeed-score-print-entry)
  (define-key elfeed-search-mode-map "=" elfeed-score-map))
#+end_src

Scoring file for =elfeed-score=:
#+begin_src elisp :tangle ~/.config/elfeed.score
(("title-or-content"
  (:text "mlops" :title-value 200 :content-value 100 :type w)
  (:text "deploy" :title-value 100 :content-value 50 :type w)
  (:text "ml" :title-value 100 :content-value 50 :type w)
  (:text "machine learning" :title-value 100 :content-value 50 :type w)
  (:text "data" :title-value 100 :content-value 50 :type w)
  (:text "APIs?" :title-value 100 :content-value 50 :type R)
  (:text "python" :title-value 200 :content-value 100 :type w)
  (:text "emacs" :title-value 100 :content-value 50 :type w)
  (:text "covid" :title-value -100 :content-value -50 :type w)
  (:text "coronavirus" :title-value -100 :content-value -50 :type w)
  (:text "N.B.A." :title-value -50 :content-value -50 :type W)
  (:text "M.L.B." :title-value -200 :content-value -100 :type W)
  (:text "Trump" :title-value -200 :content-value -100 :type W)
  (:text "Biden\(.?s\)?" :title-value -50 :content-value -10 :type R)
  (:text "\\[\\(europe\\|asia\\|middleeast\\) region\\]" :title-value -1000 :content-value -1000 :type r)
  (:text "@FTLex" :title-value -1000 :content-value -1000 :type W)
  (:text "open thread" :title-value -200 :content-value -100 :type w)
  (:text "search results" :title-value -1000 :content-value -1000 :type W))
 (mark -100))
#+end_src
**** Zen mode
Turn off text zooming
#+begin_src elisp
(setq +zen-text-scale 0)
#+end_src

#+RESULTS:
: 0

Increase width
#+begin_src elisp
(setq writeroom-width 120)
#+end_src

**** Mermaid
#+begin_src elisp
(setq ob-mermaid-cli-path (executable-find "mmdc"))
#+end_src

**** Treemacs
#+begin_src elisp
(after! treemacs
  (map! :map treemacs-mode-map
        "SPC" #'treemacs-peek)
  )

(map! :leader
      :desc "treemacs" "t t" #'treemacs)
#+end_src

#+RESULTS:
: treemacs

*** Global changes
**** Key bindings
#+begin_src elisp
(map! [home] #'move-beginning-of-line
      [end] #'move-end-of-line
      "C-x g" #'magit-status
      "s-k" #'doom/kill-this-buffer-in-all-windows
      "C-/" #'company-filter-candidates
      )
#+end_src

#+RESULTS:

Remove default smartparens bindings.
#+begin_src elisp
(after! smartparens
  (map! :map smartparens-mode-map
        "C-<left>" nil
        "C-<right>" nil
        "M-<left>" nil
        "M-<right>" nil)
  )
#+end_src
**** Hydras
***** Resize window
#+begin_src elisp
(defhydra hydra-window-resizing (:hint nil)
  "
Resizing frames
---------------
  [→] + horizontal
  [←] - horizontal
  [↑] + vertical
  [↓] - vertical
"
  ("<up>" enlarge-window)
  ("<down>" shrink-window)
  ("<right>" enlarge-window-horizontally)
  ("<left>" shrink-window-horizontally)
  )
#+end_src

***** Bindings
#+begin_src elisp
(map! :leader
      (:prefix-map ("h" . "hydras")
       :desc "buffer resizing" "r" #'hydra-window-resizing/body
       :desc "jupyter" "j" #'jupyter-org-hydra/body
       :desc "smerge" "m" #'+vc/smerge-hydra/body
       :desc "zoom" "z" #'+hydra/text-zoom/body
       ))

(map! :map smerge-mode-map
      "s-m" #'+vc/smerge-hydra/body)

(map! :map org-mode-map
      "s-h" #'jupyter-org-hydra/body)
#+end_src
**** Modes
Turn on wrap mode
#+begin_src elisp
(+global-word-wrap-mode 1)
#+end_src

Allow camel case navigation *everywhere*
#+begin_src elisp
(global-subword-mode)
#+end_src

**** Others
Display time in current frame
#+begin_src elisp
(display-time)
#+end_src

Display directory name in buffer name when file names are the same
#+begin_src elisp
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src

Turn off confirmation message at exit time
#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

Increase garbage collector limit
#+begin_src elisp
(after! gcmh
  (setq gcmh-high-cons-threshold 33554432))
#+end_src

Make regex builder default to ='string= so I don't have to use =\\= to escape special characters
#+begin_src elisp
(setq reb-re-syntax 'string)
#+end_src
Doom popups
#+begin_src elisp
(map! :leader
      :desc "Show popup" "t p" #'+popup/toggle
      )
#+end_src

** Packages
:PROPERTIES:
:header-args: :tangle ~/.doom.d/packages.el
:END:

#+begin_src elisp
(package! ox-gfm)
(package! ox-twbs)
(package! ox-rst)
(package! pocket-reader)
(package! zoom)
(package! ob-mermaid)
(package! mermaid-mode)
(package! python-docstring)
(package! org-ql)
(package! elfeed-score)
#+end_src

** Snippets
*** Org mode
#+BEGIN_SRC snippet :tangle ~/.doom.d/snippets/org-mode/jupyter-python
# -*- mode: snippet -*-
# contributor: Virgile Landeiro
# name: #+begin_src jupyter-python
# uuid: jupyter-python
# key: <jp
# --
,#+begin_src jupyter-python
`%`$0
,#+end_src
#+END_src

#+BEGIN_SRC snippet :tangle ~/.doom.d/snippets/org-mode/meeting
# -*- mode: snippet -*-
# contributor: Virgile Landeiro
# name: New meeting
# uuid: new-meeting
# key: <meet
# --
,* $1
:PROPERTIES:
:ATTENDEES: $2
:END:

$0
#+END_src
