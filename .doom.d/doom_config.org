* Init
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src elisp
;;; init.el -*- lexical-binding: t; -*-

;; Remember to run 'doom refresh' after modifying it.
;;
;; More information about these modules (and what flags they support) can be
;; found in modules/README.org.

(doom! :input
       ;;chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
                                        ;(helm
                                        ; +fuzzy
                                        ; :lang org)              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +fuzzy)               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;; fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +all             ; catch all popups that start with an asterix
        +defaults)       ; default popup rules
       ;; (pretty-code
       ;; +ioveska)       ; replace bits of code with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       ;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;; window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen

       :editor
       ;;(evil +everywhere); come to the dark side, we have cookies
       ;; file-templates    ; auto-snippets for empty files
       ;;god               ; run Emacs commands without modifier keys
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;lispy             ; vim for lisp, for people who dont like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;; rotate-text       ; cycle region at point between text candidates
       ;; snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)    ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       vc                ; version-control and Emacs, sitting in a tree
       undo
       ibuffer

       :term
       ;;eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       term              ; terminals in Emacs
       ;;vterm             ; another terminals in Emacs

       :checkers
       ;; grammar
       spell
       syntax

       :tools
       ;;ansible
       debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;; ein               ; tame Jupyter notebooks with emacs
       eval              ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup           ; helps you navigate your code and documentation
        +docsets
        +dictionary
        +offline)        ; ...or in Dash docsets locally
       ;;lsp
       macos             ; MacOS-specific commands
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp
       ;;wakatime

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       ;;(cc)                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;erlang            ; an elegant language for a more civilized age
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
;;       ess               ; emacs speaks statistics
       ;;fsharp           ; ML stands for Microsoft's Language
       ;;go                ; the hipster dialect
       ;;(haskell +intero) ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org              ; organize your plain life in plain text
        ;;+dragndrop       ; drag & drop files/images into org buffers
        +pandoc          ; export-with-pandoc support
        +jupyter
        +journal
        +roam
        ;;+present
        )        ; using org-mode for presentations
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python
        +conda
        +poetry)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;; rest              ; Emacs as a REST client
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes

       :email
       ;;(mu4e +gmail)       ; WIP
       ;;notmuch             ; WIP
       ;;(wanderlust +gmail) ; WIP

       ;; Applications are complex and opinionated modules that transform Emacs
       ;; toward a specific purpose. They may have additional dependencies and
       ;; should be loaded late.
       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       (default +bindings)
       )

#+end_src

* Config
:PROPERTIES:
:header-args: :tangle config.el
:END:
#+begin_src elisp
;;; .doom.d/config.el -*- lexical-binding: t; -*-
#+end_src
** Customize modules and modes
*** Ivy
#+begin_src elisp
(after! ivy
  (define-key ivy-minibuffer-map (kbd "<left>") 'counsel-up-directory)
  (define-key ivy-minibuffer-map (kbd "<right>") 'ivy-alt-done)
  (define-key ivy-minibuffer-map (kbd "C-<return>") 'ivy-immediate-done)
  )
#+end_src

#+RESULTS:
: ivy-immediate-done

#+begin_src elisp
(define-key prog-mode-map (kbd "C-<tab>") '+fold/toggle)
(define-key prog-mode-map (kbd "C-<") '+fold/close-all)
(define-key prog-mode-map (kbd "C->") '+fold/open-all)
#+end_src

#+RESULTS:
: +fold/open-all

*** Framemove
Move easily across frames with s-<arrow-key>.
#+name: framemove
#+begin_src elisp
(push (expand-file-name "~/.local/emacs-packages") load-path)
(require 'framemove)
(windmove-default-keybindings 'super)
(setq framemove-hook-into-windmove t)
#+end_src

*** Golden ratio

#+begin_src elisp
(custom-set-variables
 '(zoom-mode nil))

(custom-set-variables
 '(zoom-size '(0.618 . 0.618)))
#+end_src

#+RESULTS:

*** Avy
Make avy work across all windows and add quick bindings for avy goto.
#+name: avy
#+begin_src elisp
(setq avy-all-windows 'all-frames)
(map! "s-." #'avy-goto-char-timer
      "s-j" #'avy-goto-char)
#+end_src

*** Org
**** General
This does a few things:
- tangles on save
- change the agenda files to point to the org journal files
- update todo keywords
- [ ] set up twbs header
- enable auto fill
- display inline images
- indent org files automatically
#+begin_src elisp
(after! org
  (setq
   org-confirm-babel-evaluate nil
   org-default-notes-file (expand-file-name "~/org/notes.org")
   org-todo-keywords '((sequence "TODO" "DOING" "|" "DONE" "ARCHIVED")
                       (sequence "QUESTION" "WORKING-ON-IT" "|" "ANSWERED"))
   ;; Roam
   org-roam-graph-viewer "open"
   org-roam-dailies-capture-templates '(("d"
                                         "daily"
                                         plain
                                         (function org-roam-capture--get-point)
                                         :immediate-finish t
                                         :file-name "dailies/%<%Y-%m-%d>"
                                         :head "#+TITLE: %<%Y-%m-%d>"))
   org-roam-tickets-capture-templates '(("t"
                                         "tickets"
                                         plain
                                         (function org-roam-capture--get-point)
                                         "%?"
                                         :file-name "jira-tickets/%<%Y%m%d%H%M%S>-${ticket}"
                                         :head "#+TITLE: ${ticket}\n#+ROAM_KEY: https://tempuslabs.atlassian.net/browse/${ticket}"))
   org-roam-graph-exclude-matcher '("private" "dailies" "jira-tickets")
   )

  (defun org-roam-jira-capture ()
    (interactive)
    (unless org-roam-mode (org-roam-mode))
    (let ((org-roam-capture-templates org-roam-tickets-capture-templates)
          (org-roam-capture--context 'title)
          (org-roam-capture--info (list (cons 'ticket (completing-read "Ticket number: " nil)))))
      (add-hook 'org-capture-after-finalize-hook #'org-roam-capture--find-file-h)
      (org-roam--with-template-error 'org-roam-dailies-capture-templates
        (org-roam-capture--capture))))

  (map! :leader
        :desc "JIRA ticket"
        "n r t"
        #'org-roam-jira-capture)


  (add-hook! 'org-mode-hook :append #'turn-on-auto-fill #'org-indent-mode)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
  )
#+end_src

#+RESULTS:
| org-display-inline-images | org-redisplay-inline-images |


**** Bindings
#+begin_src elisp
(after! org
  (map! :map org-mode-map
        "C-<return>" #'org-insert-heading
        "C-M-<right>" #'org-demote-subtree
        "C-M-<left>" #'org-promote-subtree)

  (map! :map org-mode-map :leader
        (:prefix-map ("i" . "insert")
         :desc "drawer" "d" #'org-insert-drawer
         :desc "heading" "h" #'org-insert-heading
         :desc "item" "i" #'org-insert-item
         :desc "link" "l" #'org-insert-link
         :desc "subheading" "s" #'org-insert-subheading
         :desc "template" "t" #'org-insert-structure-template
         ))

  (require 'ox-gfm nil t)
  (require 'ox-twbs nil t)
  )
#+end_src

*** Hydras
**** Resize window
#+begin_src elisp
(defhydra hydra-window-resizing (:hint nil)
  "
Resizing frames
---------------
  [→] + horizontal
  [←] - horizontal
  [↑] + vertical
  [↓] - vertical
"
  ("<up>" enlarge-window)
  ("<down>" shrink-window)
  ("<right>" enlarge-window-horizontally)
  ("<left>" shrink-window-horizontally)
  )
#+end_src
**** Bindings
#+begin_src elisp
(map! :leader
      (:prefix-map ("h" . "hydras")
       ;;:desc "multiple cursors" "c" #'hydra-multiple-cursors/body
       :desc "buffer resizing" "r" #'hydra-window-resizing/body
       ;;:desc "jupyter" "j" #'jupyter-org-hydra/body
       :desc "smerge" "m" #'+vc/smerge-hydra/body
       :desc "zoom" "z" #'+hydra/text-zoom/body
       ))

(map! :map smerge-mode-map
      "s-m" #'+vc/smerge-hydra/body)

#+end_src

#+RESULTS:

*** Python / Jupyter
#+begin_src elisp
(after! python
  (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
  (setq conda-env-home-directory (expand-file-name "~/miniconda3"))
  (setq-default flycheck-disabled-checkers '(python-pylint)))
#+end_src

#+RESULTS:
| python-pylint |

*** Magit
#+begin_src elisp
(after! magit
  (setq magit-commit-show-diff nil)
  )
#+end_src

#+RESULTS:

*** Elfeed
#+begin_src elisp
(after! elfeed
  (setq-default elfeed-search-filter "@2-days-ago -work")
  (map! :map elfeed-show-mode-map
        "a" #'pocket-reader-add-link)
  (map! :map elfeed-search-mode-map
        "a" #'pocket-reader-add-link)
  )
#+end_src

#+RESULTS:

** Map file extensions to modes
#+name: map_extensions
#+begin_src elisp :tangle no
(add-to-list 'auto-mode-alist '("Jenkinsfile'" . groovy-mode))
#+end_src

** Miscellaneous
*** Display time
#+begin_src elisp
(display-time)
#+end_src
*** Turn on wrap mode
#+begin_src elisp
(+global-word-wrap-mode 1)
#+end_src
*** Display directory name in buffer name when file names are the same
#+begin_src elisp
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src
*** Allow camel case navigation in prog-mode
#+begin_src elisp
(add-hook! prog-mode :append (subword-mode 1))
#+end_src
*** Other bindings
#+name: global_bindings
#+begin_src elisp
(map! [home] #'move-beginning-of-line
      [end] #'move-end-of-line
      "C-x g" #'magit-status
      "s-b" #'projectile-switch-to-buffer
      "s-f" #'swiper
      "s-k" #'kill-current-buffer
      )
#+end_src

#+RESULTS: global_bindings

*** Remove doom word-move bindings
#+begin_src elisp
(after! smartparens
  (map! :map smartparens-mode-map
        "C-<left>" nil
        "C-<right>" nil
        "M-<left>" nil
        "M-<right>" nil)
  )
#+end_src

*** Set up nice fonts
#+begin_src elisp
(setq doom-font (font-spec :family "Hack" :size 13))
#+end_src

*** Turn off confirmation message at exit time
#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

*** Change theme
#+begin_src elisp
(setq doom-theme 'doom-palenight)
(doom/reload-theme)
#+end_src

#+RESULTS:
| #<frame doom_config.org – Doom Emacs 0x1078a72b8> |

*** Customize zen mode
Turn off text zooming
#+begin_src elisp
(setq +zen-text-scale 0)
#+end_src

Increase width
#+begin_src elisp
(setq writeroom-width 120)
#+end_src

*** Increase garbage collector limit
#+begin_src elisp
(after! gcmh
  (setq gcmh-high-cons-threshold 33554432))
#+end_src

* Packages
:PROPERTIES:
:header-args: :tangle packages.el
:END:

#+begin_src elisp
(package! ox-gfm)
(package! zoom)
(package! pocket-reader)
(package! ox-twbs)
#+end_src

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
